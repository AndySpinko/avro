/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.andy.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** Avro схема для передачи сервисам статуса регистрации их обращения в системе TaskFlow */
@org.apache.avro.specific.AvroGenerated
public class incidentRegistrationStatusSchema extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 4220911322962029204L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"incidentRegistrationStatusSchema\",\"namespace\":\"com.andy.avro\",\"doc\":\"Avro схема для передачи сервисам статуса регистрации их обращения в системе TaskFlow\",\"fields\":[{\"name\":\"header\",\"type\":\"string\",\"doc\":\"Служебный заголовок события\"},{\"name\":\"sndType\",\"type\":\"string\",\"doc\":\"Идентификации типа события и соответствующей ему схемы\"},{\"name\":\"sndVersion\",\"type\":\"string\",\"doc\":\"Версия схемы события\"},{\"name\":\"sndDate\",\"type\":{\"type\":\"long\",\"logicalType\":\"local-timestamp-micros\"},\"doc\":\"Дата отправки события источником\"},{\"name\":\"prevEvtID\",\"type\":\"string\",\"doc\":\"ID предыдущего события в потоке событий источника\",\"default\":\"NONE\"},{\"name\":\"signature\",\"type\":\"string\",\"doc\":\"системная подпись\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.LocalTimestampMicrosConversion());
  }

  private static final BinaryMessageEncoder<incidentRegistrationStatusSchema> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<incidentRegistrationStatusSchema> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<incidentRegistrationStatusSchema> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<incidentRegistrationStatusSchema> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<incidentRegistrationStatusSchema> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this incidentRegistrationStatusSchema to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a incidentRegistrationStatusSchema from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a incidentRegistrationStatusSchema instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static incidentRegistrationStatusSchema fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Служебный заголовок события */
  private java.lang.CharSequence header;
  /** Идентификации типа события и соответствующей ему схемы */
  private java.lang.CharSequence sndType;
  /** Версия схемы события */
  private java.lang.CharSequence sndVersion;
  /** Дата отправки события источником */
  private java.time.LocalDateTime sndDate;
  /** ID предыдущего события в потоке событий источника */
  private java.lang.CharSequence prevEvtID;
  /** системная подпись */
  private java.lang.CharSequence signature;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public incidentRegistrationStatusSchema() {}

  /**
   * All-args constructor.
   * @param header Служебный заголовок события
   * @param sndType Идентификации типа события и соответствующей ему схемы
   * @param sndVersion Версия схемы события
   * @param sndDate Дата отправки события источником
   * @param prevEvtID ID предыдущего события в потоке событий источника
   * @param signature системная подпись
   */
  public incidentRegistrationStatusSchema(java.lang.CharSequence header, java.lang.CharSequence sndType, java.lang.CharSequence sndVersion, java.time.LocalDateTime sndDate, java.lang.CharSequence prevEvtID, java.lang.CharSequence signature) {
    this.header = header;
    this.sndType = sndType;
    this.sndVersion = sndVersion;
    this.sndDate = sndDate;
    this.prevEvtID = prevEvtID;
    this.signature = signature;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return header;
    case 1: return sndType;
    case 2: return sndVersion;
    case 3: return sndDate;
    case 4: return prevEvtID;
    case 5: return signature;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      null,
      null,
      null,
      new org.apache.avro.data.TimeConversions.LocalTimestampMicrosConversion(),
      null,
      null,
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: header = (java.lang.CharSequence)value$; break;
    case 1: sndType = (java.lang.CharSequence)value$; break;
    case 2: sndVersion = (java.lang.CharSequence)value$; break;
    case 3: sndDate = (java.time.LocalDateTime)value$; break;
    case 4: prevEvtID = (java.lang.CharSequence)value$; break;
    case 5: signature = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'header' field.
   * @return Служебный заголовок события
   */
  public java.lang.CharSequence getHeader() {
    return header;
  }


  /**
   * Sets the value of the 'header' field.
   * Служебный заголовок события
   * @param value the value to set.
   */
  public void setHeader(java.lang.CharSequence value) {
    this.header = value;
  }

  /**
   * Gets the value of the 'sndType' field.
   * @return Идентификации типа события и соответствующей ему схемы
   */
  public java.lang.CharSequence getSndType() {
    return sndType;
  }


  /**
   * Sets the value of the 'sndType' field.
   * Идентификации типа события и соответствующей ему схемы
   * @param value the value to set.
   */
  public void setSndType(java.lang.CharSequence value) {
    this.sndType = value;
  }

  /**
   * Gets the value of the 'sndVersion' field.
   * @return Версия схемы события
   */
  public java.lang.CharSequence getSndVersion() {
    return sndVersion;
  }


  /**
   * Sets the value of the 'sndVersion' field.
   * Версия схемы события
   * @param value the value to set.
   */
  public void setSndVersion(java.lang.CharSequence value) {
    this.sndVersion = value;
  }

  /**
   * Gets the value of the 'sndDate' field.
   * @return Дата отправки события источником
   */
  public java.time.LocalDateTime getSndDate() {
    return sndDate;
  }


  /**
   * Sets the value of the 'sndDate' field.
   * Дата отправки события источником
   * @param value the value to set.
   */
  public void setSndDate(java.time.LocalDateTime value) {
    this.sndDate = value;
  }

  /**
   * Gets the value of the 'prevEvtID' field.
   * @return ID предыдущего события в потоке событий источника
   */
  public java.lang.CharSequence getPrevEvtID() {
    return prevEvtID;
  }


  /**
   * Sets the value of the 'prevEvtID' field.
   * ID предыдущего события в потоке событий источника
   * @param value the value to set.
   */
  public void setPrevEvtID(java.lang.CharSequence value) {
    this.prevEvtID = value;
  }

  /**
   * Gets the value of the 'signature' field.
   * @return системная подпись
   */
  public java.lang.CharSequence getSignature() {
    return signature;
  }


  /**
   * Sets the value of the 'signature' field.
   * системная подпись
   * @param value the value to set.
   */
  public void setSignature(java.lang.CharSequence value) {
    this.signature = value;
  }

  /**
   * Creates a new incidentRegistrationStatusSchema RecordBuilder.
   * @return A new incidentRegistrationStatusSchema RecordBuilder
   */
  public static com.andy.avro.incidentRegistrationStatusSchema.Builder newBuilder() {
    return new com.andy.avro.incidentRegistrationStatusSchema.Builder();
  }

  /**
   * Creates a new incidentRegistrationStatusSchema RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new incidentRegistrationStatusSchema RecordBuilder
   */
  public static com.andy.avro.incidentRegistrationStatusSchema.Builder newBuilder(com.andy.avro.incidentRegistrationStatusSchema.Builder other) {
    if (other == null) {
      return new com.andy.avro.incidentRegistrationStatusSchema.Builder();
    } else {
      return new com.andy.avro.incidentRegistrationStatusSchema.Builder(other);
    }
  }

  /**
   * Creates a new incidentRegistrationStatusSchema RecordBuilder by copying an existing incidentRegistrationStatusSchema instance.
   * @param other The existing instance to copy.
   * @return A new incidentRegistrationStatusSchema RecordBuilder
   */
  public static com.andy.avro.incidentRegistrationStatusSchema.Builder newBuilder(com.andy.avro.incidentRegistrationStatusSchema other) {
    if (other == null) {
      return new com.andy.avro.incidentRegistrationStatusSchema.Builder();
    } else {
      return new com.andy.avro.incidentRegistrationStatusSchema.Builder(other);
    }
  }

  /**
   * RecordBuilder for incidentRegistrationStatusSchema instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<incidentRegistrationStatusSchema>
    implements org.apache.avro.data.RecordBuilder<incidentRegistrationStatusSchema> {

    /** Служебный заголовок события */
    private java.lang.CharSequence header;
    /** Идентификации типа события и соответствующей ему схемы */
    private java.lang.CharSequence sndType;
    /** Версия схемы события */
    private java.lang.CharSequence sndVersion;
    /** Дата отправки события источником */
    private java.time.LocalDateTime sndDate;
    /** ID предыдущего события в потоке событий источника */
    private java.lang.CharSequence prevEvtID;
    /** системная подпись */
    private java.lang.CharSequence signature;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.andy.avro.incidentRegistrationStatusSchema.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.header)) {
        this.header = data().deepCopy(fields()[0].schema(), other.header);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.sndType)) {
        this.sndType = data().deepCopy(fields()[1].schema(), other.sndType);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.sndVersion)) {
        this.sndVersion = data().deepCopy(fields()[2].schema(), other.sndVersion);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.sndDate)) {
        this.sndDate = data().deepCopy(fields()[3].schema(), other.sndDate);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.prevEvtID)) {
        this.prevEvtID = data().deepCopy(fields()[4].schema(), other.prevEvtID);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.signature)) {
        this.signature = data().deepCopy(fields()[5].schema(), other.signature);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
    }

    /**
     * Creates a Builder by copying an existing incidentRegistrationStatusSchema instance
     * @param other The existing instance to copy.
     */
    private Builder(com.andy.avro.incidentRegistrationStatusSchema other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.header)) {
        this.header = data().deepCopy(fields()[0].schema(), other.header);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.sndType)) {
        this.sndType = data().deepCopy(fields()[1].schema(), other.sndType);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.sndVersion)) {
        this.sndVersion = data().deepCopy(fields()[2].schema(), other.sndVersion);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.sndDate)) {
        this.sndDate = data().deepCopy(fields()[3].schema(), other.sndDate);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.prevEvtID)) {
        this.prevEvtID = data().deepCopy(fields()[4].schema(), other.prevEvtID);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.signature)) {
        this.signature = data().deepCopy(fields()[5].schema(), other.signature);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'header' field.
      * Служебный заголовок события
      * @return The value.
      */
    public java.lang.CharSequence getHeader() {
      return header;
    }


    /**
      * Sets the value of the 'header' field.
      * Служебный заголовок события
      * @param value The value of 'header'.
      * @return This builder.
      */
    public com.andy.avro.incidentRegistrationStatusSchema.Builder setHeader(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.header = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'header' field has been set.
      * Служебный заголовок события
      * @return True if the 'header' field has been set, false otherwise.
      */
    public boolean hasHeader() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'header' field.
      * Служебный заголовок события
      * @return This builder.
      */
    public com.andy.avro.incidentRegistrationStatusSchema.Builder clearHeader() {
      header = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'sndType' field.
      * Идентификации типа события и соответствующей ему схемы
      * @return The value.
      */
    public java.lang.CharSequence getSndType() {
      return sndType;
    }


    /**
      * Sets the value of the 'sndType' field.
      * Идентификации типа события и соответствующей ему схемы
      * @param value The value of 'sndType'.
      * @return This builder.
      */
    public com.andy.avro.incidentRegistrationStatusSchema.Builder setSndType(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.sndType = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'sndType' field has been set.
      * Идентификации типа события и соответствующей ему схемы
      * @return True if the 'sndType' field has been set, false otherwise.
      */
    public boolean hasSndType() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'sndType' field.
      * Идентификации типа события и соответствующей ему схемы
      * @return This builder.
      */
    public com.andy.avro.incidentRegistrationStatusSchema.Builder clearSndType() {
      sndType = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'sndVersion' field.
      * Версия схемы события
      * @return The value.
      */
    public java.lang.CharSequence getSndVersion() {
      return sndVersion;
    }


    /**
      * Sets the value of the 'sndVersion' field.
      * Версия схемы события
      * @param value The value of 'sndVersion'.
      * @return This builder.
      */
    public com.andy.avro.incidentRegistrationStatusSchema.Builder setSndVersion(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.sndVersion = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'sndVersion' field has been set.
      * Версия схемы события
      * @return True if the 'sndVersion' field has been set, false otherwise.
      */
    public boolean hasSndVersion() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'sndVersion' field.
      * Версия схемы события
      * @return This builder.
      */
    public com.andy.avro.incidentRegistrationStatusSchema.Builder clearSndVersion() {
      sndVersion = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'sndDate' field.
      * Дата отправки события источником
      * @return The value.
      */
    public java.time.LocalDateTime getSndDate() {
      return sndDate;
    }


    /**
      * Sets the value of the 'sndDate' field.
      * Дата отправки события источником
      * @param value The value of 'sndDate'.
      * @return This builder.
      */
    public com.andy.avro.incidentRegistrationStatusSchema.Builder setSndDate(java.time.LocalDateTime value) {
      validate(fields()[3], value);
      this.sndDate = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'sndDate' field has been set.
      * Дата отправки события источником
      * @return True if the 'sndDate' field has been set, false otherwise.
      */
    public boolean hasSndDate() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'sndDate' field.
      * Дата отправки события источником
      * @return This builder.
      */
    public com.andy.avro.incidentRegistrationStatusSchema.Builder clearSndDate() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'prevEvtID' field.
      * ID предыдущего события в потоке событий источника
      * @return The value.
      */
    public java.lang.CharSequence getPrevEvtID() {
      return prevEvtID;
    }


    /**
      * Sets the value of the 'prevEvtID' field.
      * ID предыдущего события в потоке событий источника
      * @param value The value of 'prevEvtID'.
      * @return This builder.
      */
    public com.andy.avro.incidentRegistrationStatusSchema.Builder setPrevEvtID(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.prevEvtID = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'prevEvtID' field has been set.
      * ID предыдущего события в потоке событий источника
      * @return True if the 'prevEvtID' field has been set, false otherwise.
      */
    public boolean hasPrevEvtID() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'prevEvtID' field.
      * ID предыдущего события в потоке событий источника
      * @return This builder.
      */
    public com.andy.avro.incidentRegistrationStatusSchema.Builder clearPrevEvtID() {
      prevEvtID = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'signature' field.
      * системная подпись
      * @return The value.
      */
    public java.lang.CharSequence getSignature() {
      return signature;
    }


    /**
      * Sets the value of the 'signature' field.
      * системная подпись
      * @param value The value of 'signature'.
      * @return This builder.
      */
    public com.andy.avro.incidentRegistrationStatusSchema.Builder setSignature(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.signature = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'signature' field has been set.
      * системная подпись
      * @return True if the 'signature' field has been set, false otherwise.
      */
    public boolean hasSignature() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'signature' field.
      * системная подпись
      * @return This builder.
      */
    public com.andy.avro.incidentRegistrationStatusSchema.Builder clearSignature() {
      signature = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public incidentRegistrationStatusSchema build() {
      try {
        incidentRegistrationStatusSchema record = new incidentRegistrationStatusSchema();
        record.header = fieldSetFlags()[0] ? this.header : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.sndType = fieldSetFlags()[1] ? this.sndType : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.sndVersion = fieldSetFlags()[2] ? this.sndVersion : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.sndDate = fieldSetFlags()[3] ? this.sndDate : (java.time.LocalDateTime) defaultValue(fields()[3]);
        record.prevEvtID = fieldSetFlags()[4] ? this.prevEvtID : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.signature = fieldSetFlags()[5] ? this.signature : (java.lang.CharSequence) defaultValue(fields()[5]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<incidentRegistrationStatusSchema>
    WRITER$ = (org.apache.avro.io.DatumWriter<incidentRegistrationStatusSchema>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<incidentRegistrationStatusSchema>
    READER$ = (org.apache.avro.io.DatumReader<incidentRegistrationStatusSchema>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










