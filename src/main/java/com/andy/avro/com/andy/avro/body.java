/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.andy.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class body extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -3915727005756832341L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"body\",\"namespace\":\"com.andy.avro\",\"fields\":[{\"name\":\"IncidentId\",\"type\":\"string\",\"doc\":\"ID Инцидента\"},{\"name\":\"IncidentRegDate\",\"type\":{\"type\":\"long\",\"logicalType\":\"local-timestamp-micros\"},\"doc\":\"Дата регистрации инцидента в TaskFlow\"},{\"name\":\"IncidentNum\",\"type\":\"string\",\"doc\":\"Номер инцидента\"},{\"name\":\"InitiatorEventId\",\"type\":\"string\",\"doc\":\"ID сработки по которой создано событие\"},{\"name\":\"ExtSrcModule\",\"type\":\"string\",\"doc\":\"Идентификатор ФП, которой адресуется сообщение\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.LocalTimestampMicrosConversion());
  }

  private static final BinaryMessageEncoder<body> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<body> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<body> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<body> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<body> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this body to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a body from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a body instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static body fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** ID Инцидента */
  private java.lang.CharSequence IncidentId;
  /** Дата регистрации инцидента в TaskFlow */
  private java.time.LocalDateTime IncidentRegDate;
  /** Номер инцидента */
  private java.lang.CharSequence IncidentNum;
  /** ID сработки по которой создано событие */
  private java.lang.CharSequence InitiatorEventId;
  /** Идентификатор ФП, которой адресуется сообщение */
  private java.lang.CharSequence ExtSrcModule;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public body() {}

  /**
   * All-args constructor.
   * @param IncidentId ID Инцидента
   * @param IncidentRegDate Дата регистрации инцидента в TaskFlow
   * @param IncidentNum Номер инцидента
   * @param InitiatorEventId ID сработки по которой создано событие
   * @param ExtSrcModule Идентификатор ФП, которой адресуется сообщение
   */
  public body(java.lang.CharSequence IncidentId, java.time.LocalDateTime IncidentRegDate, java.lang.CharSequence IncidentNum, java.lang.CharSequence InitiatorEventId, java.lang.CharSequence ExtSrcModule) {
    this.IncidentId = IncidentId;
    this.IncidentRegDate = IncidentRegDate;
    this.IncidentNum = IncidentNum;
    this.InitiatorEventId = InitiatorEventId;
    this.ExtSrcModule = ExtSrcModule;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return IncidentId;
    case 1: return IncidentRegDate;
    case 2: return IncidentNum;
    case 3: return InitiatorEventId;
    case 4: return ExtSrcModule;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      null,
      new org.apache.avro.data.TimeConversions.LocalTimestampMicrosConversion(),
      null,
      null,
      null,
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: IncidentId = (java.lang.CharSequence)value$; break;
    case 1: IncidentRegDate = (java.time.LocalDateTime)value$; break;
    case 2: IncidentNum = (java.lang.CharSequence)value$; break;
    case 3: InitiatorEventId = (java.lang.CharSequence)value$; break;
    case 4: ExtSrcModule = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'IncidentId' field.
   * @return ID Инцидента
   */
  public java.lang.CharSequence getIncidentId() {
    return IncidentId;
  }


  /**
   * Sets the value of the 'IncidentId' field.
   * ID Инцидента
   * @param value the value to set.
   */
  public void setIncidentId(java.lang.CharSequence value) {
    this.IncidentId = value;
  }

  /**
   * Gets the value of the 'IncidentRegDate' field.
   * @return Дата регистрации инцидента в TaskFlow
   */
  public java.time.LocalDateTime getIncidentRegDate() {
    return IncidentRegDate;
  }


  /**
   * Sets the value of the 'IncidentRegDate' field.
   * Дата регистрации инцидента в TaskFlow
   * @param value the value to set.
   */
  public void setIncidentRegDate(java.time.LocalDateTime value) {
    this.IncidentRegDate = value;
  }

  /**
   * Gets the value of the 'IncidentNum' field.
   * @return Номер инцидента
   */
  public java.lang.CharSequence getIncidentNum() {
    return IncidentNum;
  }


  /**
   * Sets the value of the 'IncidentNum' field.
   * Номер инцидента
   * @param value the value to set.
   */
  public void setIncidentNum(java.lang.CharSequence value) {
    this.IncidentNum = value;
  }

  /**
   * Gets the value of the 'InitiatorEventId' field.
   * @return ID сработки по которой создано событие
   */
  public java.lang.CharSequence getInitiatorEventId() {
    return InitiatorEventId;
  }


  /**
   * Sets the value of the 'InitiatorEventId' field.
   * ID сработки по которой создано событие
   * @param value the value to set.
   */
  public void setInitiatorEventId(java.lang.CharSequence value) {
    this.InitiatorEventId = value;
  }

  /**
   * Gets the value of the 'ExtSrcModule' field.
   * @return Идентификатор ФП, которой адресуется сообщение
   */
  public java.lang.CharSequence getExtSrcModule() {
    return ExtSrcModule;
  }


  /**
   * Sets the value of the 'ExtSrcModule' field.
   * Идентификатор ФП, которой адресуется сообщение
   * @param value the value to set.
   */
  public void setExtSrcModule(java.lang.CharSequence value) {
    this.ExtSrcModule = value;
  }

  /**
   * Creates a new body RecordBuilder.
   * @return A new body RecordBuilder
   */
  public static com.andy.avro.body.Builder newBuilder() {
    return new com.andy.avro.body.Builder();
  }

  /**
   * Creates a new body RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new body RecordBuilder
   */
  public static com.andy.avro.body.Builder newBuilder(com.andy.avro.body.Builder other) {
    if (other == null) {
      return new com.andy.avro.body.Builder();
    } else {
      return new com.andy.avro.body.Builder(other);
    }
  }

  /**
   * Creates a new body RecordBuilder by copying an existing body instance.
   * @param other The existing instance to copy.
   * @return A new body RecordBuilder
   */
  public static com.andy.avro.body.Builder newBuilder(com.andy.avro.body other) {
    if (other == null) {
      return new com.andy.avro.body.Builder();
    } else {
      return new com.andy.avro.body.Builder(other);
    }
  }

  /**
   * RecordBuilder for body instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<body>
    implements org.apache.avro.data.RecordBuilder<body> {

    /** ID Инцидента */
    private java.lang.CharSequence IncidentId;
    /** Дата регистрации инцидента в TaskFlow */
    private java.time.LocalDateTime IncidentRegDate;
    /** Номер инцидента */
    private java.lang.CharSequence IncidentNum;
    /** ID сработки по которой создано событие */
    private java.lang.CharSequence InitiatorEventId;
    /** Идентификатор ФП, которой адресуется сообщение */
    private java.lang.CharSequence ExtSrcModule;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.andy.avro.body.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.IncidentId)) {
        this.IncidentId = data().deepCopy(fields()[0].schema(), other.IncidentId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.IncidentRegDate)) {
        this.IncidentRegDate = data().deepCopy(fields()[1].schema(), other.IncidentRegDate);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.IncidentNum)) {
        this.IncidentNum = data().deepCopy(fields()[2].schema(), other.IncidentNum);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.InitiatorEventId)) {
        this.InitiatorEventId = data().deepCopy(fields()[3].schema(), other.InitiatorEventId);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.ExtSrcModule)) {
        this.ExtSrcModule = data().deepCopy(fields()[4].schema(), other.ExtSrcModule);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
    }

    /**
     * Creates a Builder by copying an existing body instance
     * @param other The existing instance to copy.
     */
    private Builder(com.andy.avro.body other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.IncidentId)) {
        this.IncidentId = data().deepCopy(fields()[0].schema(), other.IncidentId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.IncidentRegDate)) {
        this.IncidentRegDate = data().deepCopy(fields()[1].schema(), other.IncidentRegDate);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.IncidentNum)) {
        this.IncidentNum = data().deepCopy(fields()[2].schema(), other.IncidentNum);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.InitiatorEventId)) {
        this.InitiatorEventId = data().deepCopy(fields()[3].schema(), other.InitiatorEventId);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.ExtSrcModule)) {
        this.ExtSrcModule = data().deepCopy(fields()[4].schema(), other.ExtSrcModule);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'IncidentId' field.
      * ID Инцидента
      * @return The value.
      */
    public java.lang.CharSequence getIncidentId() {
      return IncidentId;
    }


    /**
      * Sets the value of the 'IncidentId' field.
      * ID Инцидента
      * @param value The value of 'IncidentId'.
      * @return This builder.
      */
    public com.andy.avro.body.Builder setIncidentId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.IncidentId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'IncidentId' field has been set.
      * ID Инцидента
      * @return True if the 'IncidentId' field has been set, false otherwise.
      */
    public boolean hasIncidentId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'IncidentId' field.
      * ID Инцидента
      * @return This builder.
      */
    public com.andy.avro.body.Builder clearIncidentId() {
      IncidentId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'IncidentRegDate' field.
      * Дата регистрации инцидента в TaskFlow
      * @return The value.
      */
    public java.time.LocalDateTime getIncidentRegDate() {
      return IncidentRegDate;
    }


    /**
      * Sets the value of the 'IncidentRegDate' field.
      * Дата регистрации инцидента в TaskFlow
      * @param value The value of 'IncidentRegDate'.
      * @return This builder.
      */
    public com.andy.avro.body.Builder setIncidentRegDate(java.time.LocalDateTime value) {
      validate(fields()[1], value);
      this.IncidentRegDate = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'IncidentRegDate' field has been set.
      * Дата регистрации инцидента в TaskFlow
      * @return True if the 'IncidentRegDate' field has been set, false otherwise.
      */
    public boolean hasIncidentRegDate() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'IncidentRegDate' field.
      * Дата регистрации инцидента в TaskFlow
      * @return This builder.
      */
    public com.andy.avro.body.Builder clearIncidentRegDate() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'IncidentNum' field.
      * Номер инцидента
      * @return The value.
      */
    public java.lang.CharSequence getIncidentNum() {
      return IncidentNum;
    }


    /**
      * Sets the value of the 'IncidentNum' field.
      * Номер инцидента
      * @param value The value of 'IncidentNum'.
      * @return This builder.
      */
    public com.andy.avro.body.Builder setIncidentNum(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.IncidentNum = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'IncidentNum' field has been set.
      * Номер инцидента
      * @return True if the 'IncidentNum' field has been set, false otherwise.
      */
    public boolean hasIncidentNum() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'IncidentNum' field.
      * Номер инцидента
      * @return This builder.
      */
    public com.andy.avro.body.Builder clearIncidentNum() {
      IncidentNum = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'InitiatorEventId' field.
      * ID сработки по которой создано событие
      * @return The value.
      */
    public java.lang.CharSequence getInitiatorEventId() {
      return InitiatorEventId;
    }


    /**
      * Sets the value of the 'InitiatorEventId' field.
      * ID сработки по которой создано событие
      * @param value The value of 'InitiatorEventId'.
      * @return This builder.
      */
    public com.andy.avro.body.Builder setInitiatorEventId(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.InitiatorEventId = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'InitiatorEventId' field has been set.
      * ID сработки по которой создано событие
      * @return True if the 'InitiatorEventId' field has been set, false otherwise.
      */
    public boolean hasInitiatorEventId() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'InitiatorEventId' field.
      * ID сработки по которой создано событие
      * @return This builder.
      */
    public com.andy.avro.body.Builder clearInitiatorEventId() {
      InitiatorEventId = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'ExtSrcModule' field.
      * Идентификатор ФП, которой адресуется сообщение
      * @return The value.
      */
    public java.lang.CharSequence getExtSrcModule() {
      return ExtSrcModule;
    }


    /**
      * Sets the value of the 'ExtSrcModule' field.
      * Идентификатор ФП, которой адресуется сообщение
      * @param value The value of 'ExtSrcModule'.
      * @return This builder.
      */
    public com.andy.avro.body.Builder setExtSrcModule(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.ExtSrcModule = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'ExtSrcModule' field has been set.
      * Идентификатор ФП, которой адресуется сообщение
      * @return True if the 'ExtSrcModule' field has been set, false otherwise.
      */
    public boolean hasExtSrcModule() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'ExtSrcModule' field.
      * Идентификатор ФП, которой адресуется сообщение
      * @return This builder.
      */
    public com.andy.avro.body.Builder clearExtSrcModule() {
      ExtSrcModule = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public body build() {
      try {
        body record = new body();
        record.IncidentId = fieldSetFlags()[0] ? this.IncidentId : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.IncidentRegDate = fieldSetFlags()[1] ? this.IncidentRegDate : (java.time.LocalDateTime) defaultValue(fields()[1]);
        record.IncidentNum = fieldSetFlags()[2] ? this.IncidentNum : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.InitiatorEventId = fieldSetFlags()[3] ? this.InitiatorEventId : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.ExtSrcModule = fieldSetFlags()[4] ? this.ExtSrcModule : (java.lang.CharSequence) defaultValue(fields()[4]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<body>
    WRITER$ = (org.apache.avro.io.DatumWriter<body>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<body>
    READER$ = (org.apache.avro.io.DatumReader<body>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










